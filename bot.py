#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø—É—Ç–Ω–∏–∫ –¥–Ω—è ‚Äî —Ç—Ä–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è: –°–ø–æ—Ä—Ç, –ë–∏–∑–Ω–µ—Å, –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å.
–ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.
–¢–µ–ø–µ—Ä—å —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

Python 3.10+, python-telegram-bot 21.x
"""

import os
import sqlite3
from datetime import datetime, timedelta, time
from typing import Dict, Any, Optional, Tuple

import pytz
from PIL import Image, ImageDraw, ImageFont

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, MessageHandler, filters
)

# ---------------- Config ----------------
DB_PATH = os.path.join(os.path.dirname(__file__), "data", "bot.db")
os.makedirs(os.path.join(os.path.dirname(__file__), "data"), exist_ok=True)

POINTS_TRAIN = 2
POINTS_SALE = 10
DEFAULT_SALE_THRESHOLD = 0  # 0 = –ª—é–±–∞—è –ø—Ä–æ–¥–∞–∂–∞ –¥–∞—ë—Ç –æ—á–∫–∏
DEFAULT_TZ = "Asia/Yekaterinburg"  # –¢—é–º–µ–Ω—å (UTC+5)
WEEKLY_HOUR = 20  # 20:00 –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
CARD_W, CARD_H = 1200, 628  # Social-card friendly

# ------------- DB helpers ---------------
def get_conn():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        created_at TEXT,
        tz TEXT,
        notify INTEGER DEFAULT 1,
        sale_threshold INTEGER DEFAULT 0
    )
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS sport_types(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        name TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS sport_schedule(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        type_id INTEGER,
        dow INTEGER,          -- 0=Mon ... 6=Sun
        at_time TEXT          -- 'HH:MM'
    )
    """)

    cur.execute("""
    CREATE TABLE IF NOT EXISTS log_sport(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        dt TEXT,
        type_id INTEGER
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS log_business(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        dt TEXT,
        calls INTEGER DEFAULT 0,
        visibility INTEGER DEFAULT 0,
        sale_amount INTEGER DEFAULT 0,
        cash_in INTEGER DEFAULT 0
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS log_spirit(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        dt TEXT,
        sleep_hours REAL DEFAULT 0,
        meditation_min INTEGER DEFAULT 0,
        reading_min INTEGER DEFAULT 0,
        note TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS points(
        user_id INTEGER PRIMARY KEY,
        value INTEGER DEFAULT 0
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS goals(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        title TEXT,
        reward TEXT,
        sport_min INTEGER DEFAULT 0,
        business_min INTEGER DEFAULT 0,
        sales_min INTEGER DEFAULT 0,
        spirit_min INTEGER DEFAULT 0,
        points_min INTEGER DEFAULT 0,
        deadline TEXT,
        created_at TEXT
    )
    """)
    conn.commit()
    conn.close()

def ensure_user(uid:int):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users WHERE user_id=?", (uid,))
    if not cur.fetchone():
        cur.execute("INSERT INTO users(user_id, created_at, tz, sale_threshold) VALUES(?, ?, ?, ?)", (uid, datetime.utcnow().isoformat(), DEFAULT_TZ, DEFAULT_SALE_THRESHOLD))
        cur.execute("INSERT INTO points(user_id, value) VALUES(?, 0)", (uid,))
        conn.commit()
    conn.close()

def add_points(uid:int, pts:int):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("UPDATE points SET value=value+? WHERE user_id=?", (pts, uid))
    conn.commit()
    conn.close()

def get_points(uid:int)->int:
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT value FROM points WHERE user_id=?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row[0] if row else 0

def get_user_tz(uid:int)->pytz.BaseTzInfo:
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT tz FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()
    conn.close()
    tzname = row[0] if row and row[0] else DEFAULT_TZ
    try:
        return pytz.timezone(tzname)
    except Exception:
        return pytz.timezone(DEFAULT_TZ)

def get_sale_threshold(uid:int)->int:
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT sale_threshold FROM users WHERE user_id=?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row[0] if row else DEFAULT_SALE_THRESHOLD

# ------------- Utils --------------------
DOW_NAMES = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]

def fmt_money(v:int)->str:
    return f"{v:,}".replace(",", " ")

def bar(cur:int, tgt:int)->str:
    if tgt<=0: return "‚Äî"
    filled = min(10, int(10*cur/max(tgt,1)))
    return "‚ñà"*filled + "‚ñë"*(10-filled)

# ------------- Stats helpers ------------
def collect_stats(uid:int, days:int=7)->Dict[str, Any]:
    """Return stats for last `days` days."""
    since=(datetime.utcnow()-timedelta(days=days)).isoformat()
    conn=get_conn(); cur=conn.cursor()
    # sport
    cur.execute("SELECT COUNT(*) FROM log_sport WHERE user_id=? AND dt>=?", (uid, since)); sport_cnt=cur.fetchone()[0]
    # business aggregates
    cur.execute("SELECT IFNULL(SUM(calls),0), IFNULL(SUM(visibility),0), IFNULL(SUM(CASE WHEN sale_amount>0 THEN 1 ELSE 0 END),0), IFNULL(SUM(sale_amount),0), IFNULL(SUM(cash_in),0) FROM log_business WHERE user_id=? AND dt>=?", (uid, since))
    calls, vis, sales_n, sales_sum, cash_sum = cur.fetchone()
    # spirituality
    cur.execute("SELECT IFNULL(SUM(sleep_hours),0), IFNULL(SUM(meditation_min),0), IFNULL(SUM(reading_min),0) FROM log_spirit WHERE user_id=? AND dt>=?", (uid, since))
    sleep, med, read = cur.fetchone()
    conn.close()
    return {
        "sport_cnt": int(sport_cnt),
        "calls": int(calls),
        "vis": int(vis),
        "sales_n": int(sales_n),
        "sales_sum": int(sales_sum),
        "cash_sum": int(cash_sum),
        "sleep": float(sleep),
        "med": int(med),
        "read": int(read),
        "points": get_points(uid)
    }

# ------------- Card rendering -----------
def render_card(uid:int, stats7:Dict[str,Any], stats30:Dict[str,Any], path:str)->str:
    """Render a PNG progress card to `path`."""
    img = Image.new("RGB", (CARD_W, CARD_H), (234, 231, 226))
    draw = ImageDraw.Draw(img)
    # Overlay logo (top-left)
    try:
        logo_path = os.path.join(os.path.dirname(__file__), 'assets', 'logo.png')
        lg = Image.open(logo_path).convert('RGBA')
        # scale logo to ~96px height
        target_h = 96
        ratio = target_h / lg.height
        lg = lg.resize((int(lg.width*ratio), target_h))
        img.paste(lg, (36, 28), lg)
    except Exception:
        pass

    # Load fonts (fallback to default if system fonts unavailable)
    font_big = ImageFont.load_default()
    font_mid = ImageFont.load_default()
    font_small = ImageFont.load_default()
    try:
        # Typical fonts; system dependent
        font_big = ImageFont.truetype("DejaVuSans-Bold.ttf", 60)
        font_mid = ImageFont.truetype("DejaVuSans.ttf", 36)
        font_small = ImageFont.truetype("DejaVuSans.ttf", 30)
    except:
        pass

    def txt(x,y,t,fill=(235,235,245),font=font_mid):
        draw.text((x,y), t, fill=fill, font=font)

    # Header
    txt(48, 32, "–°–ü–£–¢–ù–ò–ö –î–ù–Ø ‚Äî –æ—Ç—á—ë—Ç", font=font_big)
    txt(48, 100, "üèãÔ∏è –°–ø–æ—Ä—Ç  ‚Ä¢  üíº –ë–∏–∑–Ω–µ—Å  ‚Ä¢  üïäÔ∏è –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å", font=font_mid)

    # Blocks
    y0 = 170
    pad = 30
    # Sport
    txt(48, y0, "7–¥ –°–ø–æ—Ä—Ç:", font=font_mid); 
    txt(300, y0, f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {stats7['sport_cnt']}", font=font_mid)
    txt(48, y0+60, "30–¥ –°–ø–æ—Ä—Ç:", font=font_small); 
    txt(300, y0+60, f"{stats30['sport_cnt']}", font=font_small)
    # Business
    y1 = y0 + 130
    txt(48, y1, "7–¥ –ë–∏–∑–Ω–µ—Å:", font=font_mid)
    txt(300, y1, f"–∑–≤–æ–Ω–∫–∏ {stats7['calls']}  ‚Ä¢  –ø—Ä–æ—è–≤–ª. {stats7['vis']}  ‚Ä¢  –ø—Ä–æ–¥–∞–∂–∏ {stats7['sales_n']}  ‚Ä¢  —Å—É–º–º–∞ {fmt_money(stats7['sales_sum'])} ‚ÇΩ", font=font_mid)
    txt(48, y1+60, "30–¥ –ë–∏–∑–Ω–µ—Å:", font=font_small)
    txt(300, y1+60, f"–∑–≤–æ–Ω–∫–∏ {stats30['calls']}  ‚Ä¢  –ø—Ä–æ—è–≤–ª. {stats30['vis']}  ‚Ä¢  –ø—Ä–æ–¥–∞–∂–∏ {stats30['sales_n']}  ‚Ä¢  —Å—É–º–º–∞ {fmt_money(stats30['sales_sum'])} ‚ÇΩ", font=font_small)
    # Spirit
    y2 = y1 + 130
    txt(48, y2, "7–¥ –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å:", font=font_mid)
    txt(300, y2, f"—Å–æ–Ω {stats7['sleep']:.1f} —á  ‚Ä¢  –º–µ–¥–∏—Ç–∞—Ü–∏—è {stats7['med']} –º–∏–Ω  ‚Ä¢  —á—Ç–µ–Ω–∏–µ {stats7['read']} –º–∏–Ω", font=font_mid)
    txt(48, y2+60, "30–¥ –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å:", font=font_small)
    txt(300, y2+60, f"—Å–æ–Ω {stats30['sleep']:.1f} —á  ‚Ä¢  –º–µ–¥–∏—Ç–∞—Ü–∏—è {stats30['med']} –º–∏–Ω  ‚Ä¢  —á—Ç–µ–Ω–∏–µ {stats30['read']} –º–∏–Ω", font=font_small)

    # Points
    y3 = y2 + 130
    txt(48, y3, f"üíé –û—á–∫–∏: 7–¥ ~ {stats7['points']}  ‚Ä¢  30–¥ ~ {stats30['points']}", font=font_mid)

    # Footer motivation
    txt(48, CARD_H-90, "¬´–ë–∞–ª–∞–Ω—Å ‚Äî —ç—Ç–æ —Ä–∏—Ç–º —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏.¬ª  –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–∂–µ–Ω–∏–µ. ü™ê", font=font_small)

    img.save(path, "PNG")
    return path


# ---- Guided Onboarding (/onboard) ----
ONB_TZ, ONB_TYPES, ONB_SCHED, ONB_THRESH, ONB_NOTIFY = range(5)

async def onboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    context.user_data["onb_state"] = ONB_TZ
    await update.message.reply_text(
        "üöÄ –ó–∞–ø—É—Å—Ç–∏–º –±—ã—Å—Ç—Ä—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ –∑–∞ 2‚Äì3 –º–∏–Ω—É—Ç—ã.\n\n"
        "1) –í–≤–µ–¥–∏ —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–º–µ—Ä: Asia/Yekaterinburg)."
    )

async def onboard_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text.strip()
    state = context.user_data.get("onb_state")
    if state is None:
        return  # ignore

    # Step 1: timezone
    if state == ONB_TZ:
        try:
            pytz.timezone(text)
        except Exception:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ç–∞–∫–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–∏–º–µ—Ä: Asia/Yekaterinburg")
            return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("UPDATE users SET tz=? WHERE user_id=?", (text, uid))
        conn.commit(); conn.close()
        context.user_data["onb_state"] = ONB_TYPES
        await update.message.reply_text(
            "‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
            "2) –í–≤–µ–¥–∏ *–≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫* —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–ª, –±–∞—Å—Å–µ–π–Ω, —Ç–µ–Ω–Ω–∏—Å).",
            parse_mode="Markdown"
        )
        return

    # Step 2: sport types
    if state == ONB_TYPES:
        types=[t.strip() for t in text.split(",") if t.strip()]
        if not types:
            await update.message.reply_text("–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∏–¥, –ø—Ä–∏–º–µ—Ä: –∑–∞–ª, –±–∞—Å—Å–µ–π–Ω")
            return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("DELETE FROM sport_types WHERE user_id=?", (uid,))
        for name in types:
            cur.execute("INSERT INTO sport_types(user_id,name) VALUES(?,?)",(uid,name))
        conn.commit(); conn.close()
        context.user_data["onb_state"] = ONB_SCHED
        await update.message.reply_text(
            "‚úÖ –í–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "3) –¢–µ–ø–µ—Ä—å *—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*. –û—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø.\n"
            "–§–æ—Ä–º–∞—Ç: `—Ç–∏–ø; –ü–Ω –°—Ä –ü—Ç; 19:00`\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ `–≥–æ—Ç–æ–≤–æ`.",
            parse_mode="Markdown"
        )
        return

    # Step 3: schedule (multi-line until '–≥–æ—Ç–æ–≤–æ')
    if state == ONB_SCHED:
        if text.lower() == "–≥–æ—Ç–æ–≤–æ":
            # move next
            context.user_data["onb_state"] = ONB_THRESH
            await update.message.reply_text(
                "üü¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
                "4) –£–∫–∞–∂–∏ *–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏* –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä `100000` –∏–ª–∏ `0` ‚Äî –æ—á–∫–∏ –∑–∞ –ª—é–±—É—é –ø—Ä–æ–¥–∞–∂—É."
            )
            return
        # parse line
        try:
            part = [p.strip() for p in text.split(";")]
            typ, dows_str, at = part[0], part[1], part[2]
            dmap = { "–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6 }
            dows = [dmap[t.lower()] for t in dows_str.split()]
            conn=get_conn(); cur=conn.cursor()
            cur.execute("SELECT id FROM sport_types WHERE user_id=? AND name=?", (uid, typ))
            row=cur.fetchone()
            if not row:
                cur.execute("INSERT INTO sport_types(user_id,name) VALUES(?,?)",(uid,typ))
                type_id=cur.lastrowid
            else:
                type_id=row[0]
            for d in dows:
                cur.execute("INSERT INTO sport_schedule(user_id,type_id,dow,at_time) VALUES(?,?,?,?)",(uid,type_id,d,at))
            conn.commit(); conn.close()
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ. –ï—â—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è? –ò–ª–∏ –Ω–∞–ø–∏—à–∏ `–≥–æ—Ç–æ–≤–æ`.")
        except Exception:
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: `–∑–∞–ª; –ü–Ω –°—Ä –ü—Ç; 19:00`")
        return

    # Step 4: threshold
    if state == ONB_THRESH:
        try:
            val=int(text)
        except:
            await update.message.reply_text("–ù—É–∂–Ω–∞ —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö. –ü—Ä–∏–º–µ—Ä: 100000 –∏–ª–∏ 0")
            return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("UPDATE users SET sale_threshold=? WHERE user_id=?", (val, uid))
        conn.commit(); conn.close()
        context.user_data["onb_state"] = ONB_NOTIFY
        await update.message.reply_text(
            f"‚úÖ –ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {fmt_money(val)} ‚ÇΩ.\n\n"
            "5) –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã? (–¥–∞/–Ω–µ—Ç)"
        )
        return

    # Step 5: notify
    if state == ONB_NOTIFY:
        ans = text.lower()
        turn_on = ans in ("–¥–∞","yes","y","+","–≤–∫–ª","on","–∫–æ–Ω–µ—á–Ω–æ")
        conn=get_conn(); cur=conn.cursor()
        cur.execute("UPDATE users SET notify=? WHERE user_id=?", (1 if turn_on else 0, uid))
        conn.commit(); conn.close()
        if turn_on:
            schedule_all_jobs(context.application, uid)
            await update.message.reply_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")
        else:
            clear_all_jobs(context.application, uid)
            await update.message.reply_text("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å /notify).")
        context.user_data["onb_state"] = None
        await update.message.reply_text(
            "üéâ –ì–æ—Ç–æ–≤–æ! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞:\n"
            "/log ‚Äî –±—ã—Å—Ç—Ä—ã–π –ª–æ–≥\n/goals ‚Äî —Ü–µ–ª–∏\n/addgoal ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n/report ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç—á—ë—Ç–∞\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        )
        return

# ------------- Bot Handlers -------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    txt = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ *–°–ø—É—Ç–Ω–∏–∫ –¥–Ω—è* ‚Äî —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π —Å–ø—É—Ç–Ω–∏–∫: –°–ø–æ—Ä—Ç √ó –ë–∏–∑–Ω–µ—Å √ó –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å.\n\n"
        "üéØ –õ–æ–≥–∏—Ä—É–π –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–±–∏—Ä–∞–π –æ—á–∫–∏ (+2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, +10 –ø—Ä–æ–¥–∞–∂–∞), —Å—Ç–∞–≤—å —Ü–µ–ª–∏ –∏ *–ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –≤—Å–µ—Ö —Ç—Ä—ë—Ö —Å—Ñ–µ—Ä*.\n\n"
        "–ù–∞—á–Ω–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–∫: /setup\n"
        "–ë—ã—Å—Ç—Ä—ã–π –ª–æ–≥: /log\n"
        "–¶–µ–ª–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã: /goals /addgoal /claim\n"
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: /report\n"
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã: /notify\n"
        "–ü–æ–º–æ—â—å: /help"
    )
    await update.message.reply_markdown_v2(txt)
    # Send brand logo
    try:
        await update.message.reply_photo(photo=open(os.path.join(os.path.dirname(__file__), 'assets', 'logo.png'), 'rb'), caption='–°–ø—É—Ç–Ω–∏–∫ –¥–Ω—è ‚Äî —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Ä–±–∏—Ç–µ –¥–Ω—è.')
    except Exception:
        pass
    # ‚§µÔ∏è –û–Ω–±–æ—Ä–¥–∏–Ω–≥: —Å–ø—Ä–æ—Å–∏–º –ø–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –æ—á–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (0 = –æ—á–∫–∏ –∑–∞ –ª—é–±—É—é –ø—Ä–æ–¥–∞–∂—É)
    try:
        threshold = get_sale_threshold(uid)
    except Exception:
        threshold = 0
    if threshold == 0 and not context.user_data.get("asked_threshold_once"):
        context.user_data["await_threshold"] = True
        context.user_data["asked_threshold_once"] = True
        await update.message.reply_text(
            "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä *—Å–¥–µ–ª–∫–∏* —Å—á–∏—Ç–∞—Ç—å \"–∫—Ä—É–ø–Ω–æ–π\" –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤?\n"
            "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ ‚ÇΩ. –ù–∞–ø–∏—à–∏ `0`, –µ—Å–ª–∏ –æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å—Å—è –∑–∞ *–ª—é–±—É—é* –ø—Ä–æ–¥–∞–∂—É.",
            parse_mode="Markdown"
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# ---- Setup flow ----
SETUP_WAIT = range(1)

async def setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    ensure_user(uid)
    kb = [
        [InlineKeyboardButton("üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="setup_tz"),
         InlineKeyboardButton("üèãÔ∏è –í–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="setup_sport_types")],
        [InlineKeyboardButton("üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç–∞", callback_data="setup_schedule"),
         InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ON/OFF", callback_data="setup_notify")],
        [InlineKeyboardButton("üíº –ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ (–¥–ª—è –æ—á–∫–æ–≤)", callback_data="setup_threshold")]
    ]
    await update.message.reply_text("–ß—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º?", reply_markup=InlineKeyboardMarkup(kb))
    return SETUP_WAIT

async def setup_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    uid = query.from_user.id
    data = query.data
    if data=="setup_tz":
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–ø—Ä–∏–º–µ—Ä: *Asia/Yekaterinburg*).", parse_mode="Markdown")
        context.user_data["await_tz"]=True
    elif data=="setup_sport_types":
        await query.edit_message_text("–í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø—Ä–∏–º–µ—Ä: *–∑–∞–ª, –±–∞—Å—Å–µ–π–Ω, —Ç–µ–Ω–Ω–∏—Å*).", parse_mode="Markdown")
        context.user_data["await_sport_types"]=True
    elif data=="setup_schedule":
        await query.edit_message_text("–§–æ—Ä–º–∞—Ç: *—Ç–∏–ø, –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º—è*. –ü—Ä–∏–º–µ—Ä: `–∑–∞–ª; –ü–Ω –°—Ä –ü—Ç; 19:00`.\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.", parse_mode="Markdown")
        context.user_data["await_schedule"]=True
    elif data=="setup_notify":
        conn=get_conn(); cur=conn.cursor()
        cur.execute("SELECT notify FROM users WHERE user_id=?", (uid,)); cur_val=cur.fetchone()[0]
        new_val=0 if cur_val else 1
        cur.execute("UPDATE users SET notify=? WHERE user_id=?", (new_val, uid))
        conn.commit(); conn.close()
        if new_val:
            schedule_all_jobs(context.application, uid)
        else:
            clear_all_jobs(context.application, uid)
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã: " + ("–í–ö–õ üîî" if new_val else "–í–´–ö–õ üîï"))
    elif data=="setup_threshold":
        await query.edit_message_text("–í–≤–µ–¥–∏ –ø–æ—Ä–æ–≥ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ (0 = –ª—é–±–∞—è): –Ω–∞–ø—Ä–∏–º–µ—Ä `100000`.")
        context.user_data["await_threshold"]=True

async def setup_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text.strip()
    if context.user_data.get("await_tz"):
        import pytz
        try:
            pytz.timezone(text)
        except Exception:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ç–∞–∫–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–∏–º–µ—Ä: Asia/Yekaterinburg")
            return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("UPDATE users SET tz=? WHERE user_id=?", (text, uid))
        conn.commit(); conn.close()
        context.user_data["await_tz"]=False
        schedule_all_jobs(context.application, uid)
        await update.message.reply_text(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text}. –ì–æ—Ç–æ–≤–æ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞–º.")
        return
    if context.user_data.get("await_sport_types"):
        types=[t.strip() for t in text.split(",") if t.strip()]
        conn=get_conn(); cur=conn.cursor()
        cur.execute("DELETE FROM sport_types WHERE user_id=?", (uid,))
        for name in types:
            cur.execute("INSERT INTO sport_types(user_id,name) VALUES(?,?)",(uid,name))
        conn.commit(); conn.close()
        context.user_data["await_sport_types"]=False
        await update.message.reply_text("–í–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: " + ", ".join(types))
        return
    if context.user_data.get("await_schedule"):
        try:
            part = [p.strip() for p in text.split(";")]
            typ, dows_str, at = part[0], part[1], part[2]
            dmap = { "–ø–Ω":0,"–≤—Ç":1,"—Å—Ä":2,"—á—Ç":3,"–ø—Ç":4,"—Å–±":5,"–≤—Å":6 }
            dows = [dmap[t.lower()] for t in dows_str.split()]
            conn=get_conn(); cur=conn.cursor()
            cur.execute("SELECT id FROM sport_types WHERE user_id=? AND name=?", (uid, typ))
            row=cur.fetchone()
            if not row:
                cur.execute("INSERT INTO sport_types(user_id,name) VALUES(?,?)",(uid,typ))
                type_id=cur.lastrowid
            else:
                type_id=row[0]
            for d in dows:
                cur.execute("INSERT INTO sport_schedule(user_id,type_id,dow,at_time) VALUES(?,?,?,?)",(uid,type_id,d,at))
            conn.commit(); conn.close()
            schedule_sport_jobs(context.application, uid)
            await update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
        except Exception:
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: `–∑–∞–ª; –ü–Ω –°—Ä –ü—Ç; 19:00`", parse_mode="Markdown")
        return
    if context.user_data.get("await_threshold"):
        try:
            val=int(text)
        except:
            await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000 –∏–ª–∏ 0")
            return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("UPDATE users SET sale_threshold=? WHERE user_id=?", (val, uid))
        conn.commit(); conn.close()
        context.user_data["await_threshold"]=False
        await update.message.reply_text(f"–ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –æ—á–∫–æ–≤: {fmt_money(val)} ‚ÇΩ")

# ---- Logging ----
async def log_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id; ensure_user(uid)
    conn=get_conn(); cur=conn.cursor()
    cur.execute("SELECT id,name FROM sport_types WHERE user_id=?", (uid,))
    types=cur.fetchall(); conn.close()
    sport_buttons = [InlineKeyboardButton(f"üèãÔ∏è {name}", callback_data=f"log_sport:{tid}") for tid,name in types] or [InlineKeyboardButton("–î–æ–±–∞–≤—å –≤–∏–¥—ã –≤ /setup", callback_data="noop")]
    kb = [
        sport_buttons[:3],
        sport_buttons[3:6],
        [InlineKeyboardButton("üìû –ó–≤–æ–Ω–æ–∫", callback_data="log_biz:call"),
         InlineKeyboardButton("‚ú® –ü—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç—å", callback_data="log_biz:vis")],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞", callback_data="log_biz:sale"),
         InlineKeyboardButton("üßæ –ö–∞—Å—Å–∞", callback_data="log_biz:cash")],
        [InlineKeyboardButton("üò¥ –°–æ–Ω", callback_data="log_spi:sleep"),
         InlineKeyboardButton("üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="log_spi:med"),
         InlineKeyboardButton("üìö –ß—Ç–µ–Ω–∏–µ", callback_data="log_spi:read")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏, —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º:", reply_markup=InlineKeyboardMarkup(kb))

async def log_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    uid=query.from_user.id
    data=query.data
    if data.startswith("log_sport:"):
        tid=int(data.split(":")[1])
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_sport(user_id,dt,type_id) VALUES(?,?,?)",(uid, datetime.utcnow().isoformat(), tid))
        conn.commit(); conn.close()
        add_points(uid, POINTS_TRAIN)
        await query.edit_message_text("üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! +2 –æ—á–∫–∞. /stats")
    elif data=="log_biz:call":
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_business(user_id,dt,calls) VALUES(?,?,1)",(uid, datetime.utcnow().isoformat()))
        conn.commit(); conn.close()
        await query.edit_message_text("üìû –ó–≤–æ–Ω–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω. /stats")
    elif data=="log_biz:vis":
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_business(user_id,dt,visibility) VALUES(?,?,1)",(uid, datetime.utcnow().isoformat()))
        conn.commit(); conn.close()
        await query.edit_message_text("‚ú® –ü—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –∑–∞—Å—á–∏—Ç–∞–Ω–∞. /stats")
    elif data=="log_biz:cash":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Å—Å—É (—Ä—É–±):")
        context.user_data["await_cash"]=True
    elif data=="log_biz:sale":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ (—Ä—É–±):")
        context.user_data["await_sale"]=True
    elif data=="log_spi:sleep":
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–Ω–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä 7.5)")
        context.user_data["await_sleep"]=True
    elif data=="log_spi:med":
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏?")
        context.user_data["await_med"]=True
    elif data=="log_spi:read":
        await query.edit_message_text("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è?")
        context.user_data["await_read"]=True

async def log_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    txt=update.message.text.strip()
    if context.user_data.get("await_cash"):
        try: val=int(txt)
        except: await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ä—É–±–ª–µ–π."); return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_business(user_id,dt,cash_in) VALUES(?,?,?)",(uid, datetime.utcnow().isoformat(), val))
        conn.commit(); conn.close()
        context.user_data["await_cash"]=False
        await update.message.reply_text(f"üßæ –í –∫–∞—Å—Å—É –¥–æ–±–∞–≤–ª–µ–Ω–æ {fmt_money(val)} ‚ÇΩ. /stats")
        return
    if context.user_data.get("await_sale"):
        try: val=int(txt)
        except: await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ä—É–±–ª–µ–π."); return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_business(user_id,dt,sale_amount) VALUES(?,?,?)",(uid, datetime.utcnow().isoformat(), val))
        conn.commit(); conn.close()
        if val >= get_sale_threshold(uid):
            add_points(uid, POINTS_SALE)
            await update.message.reply_text(f"üí∞ –ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ {fmt_money(val)} ‚ÇΩ! +{POINTS_SALE} –æ—á–∫–æ–≤. /stats")
        else:
            await update.message.reply_text(f"–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ {fmt_money(val)} ‚ÇΩ –∑–∞–ø–∏—Å–∞–Ω–∞ (–º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –æ—á–∫–æ–≤). /stats")
        context.user_data["await_sale"]=False
        return
    if context.user_data.get("await_sleep"):
        try: hours=float(txt)
        except: await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: 7.5"); return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_spirit(user_id,dt,sleep_hours) VALUES(?,?,?)",(uid, datetime.utcnow().isoformat(), hours))
        conn.commit(); conn.close()
        context.user_data["await_sleep"]=False
        await update.message.reply_text("üò¥ –°–æ–Ω –∑–∞–ø–∏—Å–∞–Ω. /stats"); return
    if context.user_data.get("await_med"):
        try: mins=int(txt)
        except: await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç."); return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_spirit(user_id,dt,meditation_min) VALUES(?,?,?)",(uid, datetime.utcnow().isoformat(), mins))
        conn.commit(); conn.close()
        context.user_data["await_med"]=False
        await update.message.reply_text("üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞. /stats"); return
    if context.user_data.get("await_read"):
        try: mins=int(txt)
        except: await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç."); return
        conn=get_conn(); cur=conn.cursor()
        cur.execute("INSERT INTO log_spirit(user_id,dt,reading_min) VALUES(?,?,?)",(uid, datetime.utcnow().isoformat(), mins))
        conn.commit(); conn.close()
        context.user_data["await_read"]=False
        await update.message.reply_text("üìö –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. /stats"); return

# ---- Stats ----
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id; ensure_user(uid)
    s30=collect_stats(uid, 30)
    msg = (
        f"üìä *30 –¥–Ω–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*\n"
        f"üèãÔ∏è –°–ø–æ—Ä—Ç: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî {s30['sport_cnt']}\n"
        f"üíº –ë–∏–∑–Ω–µ—Å: –∑–≤–æ–Ω–∫–∏ ‚Äî {s30['calls']}, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äî {s30['vis']}, –ø—Ä–æ–¥–∞–∂–∏ ‚Äî {s30['sales_n']}, —Å—É–º–º–∞ ‚Äî {fmt_money(int(s30['sales_sum']))} ‚ÇΩ, –∫–∞—Å—Å–∞ ‚Äî {fmt_money(int(s30['cash_sum']))} ‚ÇΩ\n"
        f"üïäÔ∏è –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å: —Å–æ–Ω ‚Äî {s30['sleep']:.1f} —á, –º–µ–¥–∏—Ç–∞—Ü–∏—è ‚Äî {s30['med']} –º–∏–Ω, —á—Ç–µ–Ω–∏–µ ‚Äî {s30['read']} –º–∏–Ω\n"
        f"üíé –û—á–∫–∏: {s30['points']}\n"
    )
    await update.message.reply_markdown_v2(msg)

# ---- Goals ----
async def goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    conn=get_conn(); cur=conn.cursor()
    cur.execute("SELECT id,title,reward,sport_min,business_min,sales_min,spirit_min,points_min,deadline,created_at FROM goals WHERE user_id=?", (uid,))
    rows=cur.fetchall(); conn.close()
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π. –î–æ–±–∞–≤—å: /addgoal")
        return
    lines=[]
    for g in rows:
        gid, title, reward, smin, bmin, salemin, spmin, pmin, deadline, created = g
        lines.append(f"‚Ä¢ {title} ‚Üí {reward} (–¥–æ {deadline})\n  –ú–∏–Ω: —Å–ø–æ—Ä—Ç {smin}, –±–∏–∑–Ω–µ—Å {bmin} (+ –ø—Ä–æ–¥–∞–∂–∏ {salemin}), –¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å {spmin}, –æ—á–∫–∏ {pmin}")
    await update.message.reply_text("üéØ –¶–µ–ª–∏:\n" + "\n".join(lines))

ADDGOAL_WAIT = range(2)

async def addgoal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–ø–∏—à–∏ —Ü–µ–ª—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞–≥—Ä–∞–¥–∞ | —Å–ø–æ—Ä—Ç_min | –±–∏–∑–Ω–µ—Å_min | –ø—Ä–æ–¥–∞–∂–∏_min | –¥—É—Ö_min | –æ—á–∫–∏_min | –¥–µ–¥–ª–∞–π–Ω(YYYY-MM-DD)`\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä—ã–≤–æ–∫ | –ê–π–ø–∞–¥ | 10 | 30 | 3 | 7 | 0 | 2025-10-31`",
        parse_mode="Markdown"
    )
    context.user_data["await_goal"]=True
    return ADDGOAL_WAIT

async def addgoal_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("await_goal"): return
    uid=update.effective_user.id
    parts=[p.strip() for p in update.message.text.split("|")]
    if len(parts)!=8:
        await update.message.reply_text("–ù—É–∂–Ω–æ 8 –ø–æ–ª–µ–π, —Å–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ.")
        return
    title,reward,smin,bmin,salesmin,spmin,pmin,deadline=parts
    try:
        smin=int(smin); bmin=int(bmin); salesmin=int(salesmin); spmin=int(spmin); pmin=int(pmin)
        datetime.strptime(deadline, "%Y-%m-%d")
    except Exception:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å —á–∏—Å–ª–∞ –∏ –¥–∞—Ç—É (YYYY-MM-DD).")
        return
    conn=get_conn(); cur=conn.cursor()
    cur.execute("""INSERT INTO goals(user_id,title,reward,sport_min,business_min,sales_min,spirit_min,points_min,deadline,created_at)
                   VALUES(?,?,?,?,?,?,?,?,?,?)""",
                   (uid,title,reward,smin,bmin,salesmin,spmin,pmin,deadline,datetime.utcnow().isoformat()))
    conn.commit(); conn.close()
    context.user_data["await_goal"]=False
    await update.message.reply_text("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ. –°–º–æ—Ç—Ä–∏ /goals")

async def claim(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    now = datetime.utcnow()
    conn=get_conn(); cur=conn.cursor()
    cur.execute("SELECT id,title,reward,sport_min,business_min,sales_min,spirit_min,points_min,deadline,created_at FROM goals WHERE user_id=?", (uid,))
    rows=cur.fetchall()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. /addgoal")
        conn.close(); return
    eligible=[]; missing=[]
    for g in rows:
        gid,title,reward,smin,bmin,salesmin,spmin,pmin,deadline,created = g
        deadline_dt = datetime.strptime(deadline, "%Y-%m-%d")
        if now > deadline_dt + timedelta(days=1):
            continue
        cur.execute("SELECT COUNT(*) FROM log_sport WHERE user_id=? AND dt>=? AND dt<=?",
                    (uid, created, deadline_dt.isoformat()))
        sport_cnt = cur.fetchone()[0]
        cur.execute("""SELECT IFNULL(SUM(calls),0), IFNULL(SUM(visibility),0), IFNULL(SUM(CASE WHEN sale_amount>0 THEN 1 ELSE 0 END),0)
                       FROM log_business WHERE user_id=? AND dt>=? AND dt<=?""",
                    (uid, created, deadline_dt.isoformat()))
        calls, vis, sales_n = cur.fetchone()
        business_actions = int(calls)+int(vis)
        cur.execute("""SELECT IFNULL(COUNT(*),0) FROM log_spirit
                       WHERE user_id=? AND dt>=? AND dt<=? AND (sleep_hours>0 OR meditation_min>0 OR reading_min>0)""",
                    (uid, created, deadline_dt.isoformat()))
        spirit_n = cur.fetchone()[0]
        pts = get_points(uid)
        ok = (sport_cnt>=smin) and (business_actions>=bmin) and (sales_n>=salesmin) and (spirit_n>=spmin) and (pts>=pmin)
        if ok:
            eligible.append(f"‚úÖ {title} ‚Üí *{reward}*")
        else:
            miss = []
            if sport_cnt<smin: miss.append(f"—Å–ø–æ—Ä—Ç {sport_cnt}/{smin}")
            if business_actions<bmin: miss.append(f"–±–∏–∑–Ω–µ—Å {business_actions}/{bmin}")
            if sales_n<salesmin: miss.append(f"–ø—Ä–æ–¥–∞–∂–∏ {sales_n}/{salesmin}")
            if spirit_n<spmin: miss.append(f"–¥—É—Ö {spirit_n}/{spmin}")
            if pts<pmin: miss.append(f"–æ—á–∫–∏ {pts}/{pmin}")
            missing.append(f"‚è≥ {title}: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî " + ", ".join(miss))
    conn.close()
    if eligible:
        await update.message.reply_markdown_v2("üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n" + "\n".join(eligible))
    if missing:
        await update.message.reply_text("–ß—Ç–æ –µ—â—ë –¥–æ–±–∏—Ç—å –¥–æ –Ω–∞–≥—Ä–∞–¥—ã:\n" + "\n".join(missing))
    if not eligible and not missing:
        await update.message.reply_text("–í—Å–µ —Ü–µ–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. /addgoal")

# ---- Notifications & –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Çs ----
def clear_all_jobs(app, uid:int):
    for job in app.job_queue.get_jobs_by_name(f"sport_rem_{uid}"):
        job.schedule_removal()
    for job in app.job_queue.get_jobs_by_name(f"weekly_{uid}"):
        job.schedule_removal()

def schedule_sport_jobs(app, uid:int):
    for job in app.job_queue.get_jobs_by_name(f"sport_rem_{uid}"):
        job.schedule_removal()
    conn=get_conn(); cur=conn.cursor()
    cur.execute("SELECT s.dow, s.at_time, t.name FROM sport_schedule s JOIN sport_types t ON s.type_id=t.id WHERE s.user_id=?", (uid,))
    rows=cur.fetchall(); conn.close()
    tz = get_user_tz(uid)
    for dow, at, name in rows:
        hh,mm = map(int, at.split(":"))
        app.job_queue.run_daily(
            callback=remind_sport,
            time=time(hour=hh, minute=mm, tzinfo=tz),
            days=(dow,),
            data={"uid":uid, "text":f"üèãÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name} —Å–µ–≥–æ–¥–Ω—è –≤ {at}"},
            name=f"sport_rem_{uid}"
        )

def schedule_weekly_report(app, uid:int):
    for job in app.job_queue.get_jobs_by_name(f"weekly_{uid}"):
        job.schedule_removal()
    tz = get_user_tz(uid)
    app.job_queue.run_daily(
        callback=send_weekly_report,
        time=time(hour=WEEKLY_HOUR, minute=0, tzinfo=tz),
        days=(6,),  # Sunday
        data={"uid":uid},
        name=f"weekly_{uid}"
    )

def schedule_all_jobs(app, uid:int):
    schedule_sport_jobs(app, uid)
    schedule_weekly_report(app, uid)

async def remind_sport(context: ContextTypes.DEFAULT_TYPE):
    data=context.job.data; uid=data["uid"]
    try:
        await context.bot.send_message(chat_id=uid, text=data["text"])
    except Exception:
        pass

async def send_weekly_report(context: ContextTypes.DEFAULT_TYPE):
    uid=context.job.data["uid"]
    await _send_report_card(context.bot, uid)

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    await _send_report_card(context.bot, uid, notify=True, chat_id=uid)

async def _send_report_card(bot, uid:int, notify:bool=False, chat_id:Optional[int]=None):
    s7 = collect_stats(uid, 7)
    s30 = collect_stats(uid, 30)
    # render card
    img_path = os.path.join(os.path.dirname(__file__), "data", f"report_{uid}.png")
    render_card(uid, s7, s30, img_path)
    caption = (
        "üóìÔ∏è *–û—Ç—á—ë—Ç –°–ø—É—Ç–Ω–∏–∫–∞ –¥–Ω—è*\n"
        f"üèãÔ∏è –°–ø–æ—Ä—Ç: {s7['sport_cnt']} —Ç—Ä–µ–Ω. (7–¥) ‚Ä¢ {s30['sport_cnt']} (30–¥)\n"
        f"üíº –ë–∏–∑–Ω–µ—Å: –∑–≤–æ–Ω–∫–∏ {s7['calls']}, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ {s7['vis']}, –ø—Ä–æ–¥–∞–∂–∏ {s7['sales_n']} (7–¥)\n"
        f"üïäÔ∏è –î—É—Ö: —Å–æ–Ω {s7['sleep']:.1f} —á, –º–µ–¥–∏—Ç–∞—Ü–∏—è {s7['med']} –º–∏–Ω, —á—Ç–µ–Ω–∏–µ {s7['read']} –º–∏–Ω\n"
        f"üíé –û—á–∫–∏: {s30['points']} (–Ω–∞–∫–æ–ø–ª–µ–Ω–æ)"
    )
    try:
        await bot.send_photo(chat_id=chat_id or uid, photo=InputFile(img_path), caption=caption, parse_mode="Markdown")
    except Exception:
        # Fallback: send text only
        await bot.send_message(chat_id=chat_id or uid, text=caption, parse_mode="Markdown")

async def notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid=update.effective_user.id
    conn=get_conn(); cur=conn.cursor()
    cur.execute("SELECT notify FROM users WHERE user_id=?", (uid,)); cur_val=cur.fetchone()[0]
    new_val=0 if cur_val else 1
    cur.execute("UPDATE users SET notify=? WHERE user_id=?", (new_val, uid))
    conn.commit(); conn.close()
    if new_val:
        schedule_all_jobs(context.application, uid)
    else:
        clear_all_jobs(context.application, uid)
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç—ã: " + ("–í–ö–õ üîî" if new_val else "–í–´–ö–õ üîï"))

# ------------- Wiring -------------------
def build_app():
    token = os.getenv("TELEGRAM_TOKEN")
    if not token and os.path.exists(os.path.join(os.path.dirname(__file__), ".env")):
        for line in open(os.path.join(os.path.dirname(__file__), ".env"), "r", encoding="utf-8"):
            if line.startswith("TELEGRAM_TOKEN="):
                token=line.strip().split("=",1)[1]
    if not token:
        raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    init_db()
    app = ApplicationBuilder().token(token).build()
    # commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("onboard", onboard))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("setup", setup))
    app.add_handler(CallbackQueryHandler(setup_cb, pattern="^setup_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, onboard_text))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, setup_text))
    app.add_handler(CommandHandler("log", log_menu))
    app.add_handler(CallbackQueryHandler(log_cb, pattern="^(log_sport|log_biz|log_spi):"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_text))  # keep order
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("goals", goals))
    app.add_handler(CommandHandler("addgoal", addgoal))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, addgoal_text))  # keep order
    app.add_handler(CommandHandler("claim", claim))
    app.add_handler(CommandHandler("notify", notify))
    app.add_handler(CommandHandler("report", report))
    return app

def main():
    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
